{
  "Snippet responsável por tratar uma nova conexão de dados com o MongoDb": {
    "prefix": "mongo-serverless-conn",
    "body": [
      "const { MongoClient } = require('mongodb')",
      "",
      "const config = {",
      "  url: 'mongodb://localhost:27017/crud-serverless-mongo-wavy',",
      "  dbName: 'crud-serverless-mongo-wavy'",
      "};",
      "",
      "async function createConnection () {",
      "  const connection = await MongoClient.connect(config.url, { useNewUrlParser: true })",
      "  const db = connection.db(config.dbName)",
      "  return {",
      "    connection,",
      "    db",
      "  }",
      "}",
      "",
      "module.exports = createConnection"
    ],
    "description": "Snippet responsável por tratar uma nova conexão de dados com o MongoDb"
  },
  "Snippet responsável por criar um novo 'Funcionário'": {
    "prefix": "mongo-serverless-create",
    "body": [
      "const createMongoClient = require('../shared/mongo')",
      "",
      "module.exports = async function (context, req) {",
      "  const funcionario = req.body || {}",
      "",
      "  if (funcionario) {",
      "    context.res = {",
      "      status: 400,",
      "      body: 'Os dados do(a) Funcionário(a) é obrigatório!'",
      "    }",
      "  }",
      "",
      "  const { db, connection } = await createMongoClient()",
      "",
      "  const Funcionarios = db.collection('funcionarios')",
      "",
      "  try {",
      "    const funcionarios = await Funcionarios.insert(funcionario)",
      "    connection.close()",
      "",
      "    context.res = {",
      "      status: 201,",
      "      body: funcionarios.ops[0]",
      "    }",
      "  } catch (error) {",
      "    context.res = {",
      "      status: 500,",
      "      body: 'Error ao criar um novo Funcionário(a)'",
      "    }",
      "  }",
      "}",
      ""
    ],
    "description": "Snippet responsável por criar um novo 'Funcionário'"
  },
  "Snippet responsável por listar todos os 'Funcionários'": {
    "prefix": "mongo-serverless-list",
    "body": [
      "const createMongoClient = require('../shared/mongo')",
      "",
      "module.exports = async context => {",
      "  const { db, connection } = await createMongoClient()",
      "",
      "",
      "  const Funcionarios = db.collection('funcionarios')",
      "  const res = await Funcionarios.find({})",
      "  const body = await res.toArray()",
      "",
      "  connection.close()",
      "",
      "  context.res = {",
      "    status: 200,",
      "    body",
      "  }",
      "}",
    ],
    "description": "Snippet responsável por listar todos os 'Funcionários'"
  },
  "Snippet responsável por atualizar 'Funcionário' por Id": {
    "prefix": "mongo-serverless-update",
    "body": [
      "const { ObjectID } = require('mongodb')",
      "const createMongoClient = require('../shared/mongo')",
      "",
      "module.exports = async function (context, req) {",
      "  const { id } = req.params",
      "  const funcionario = req.body || {}",
      "",
      "  if (!id || !funcionario) {",
      "    context.res = {",
      "      status: 400,",
      "      body: 'Os campos são obrigatórios'",
      "    }",
      "",
      "    return",
      "  }",
      "",
      "  const { db, connection } = await createMongoClient()",
      "  const Funcionarios = db.collection('funcionarios')",
      "",
      "  try {",
      "    const funcionarios = await Funcionarios.findOneAndUpdate(",
      "      { _id: ObjectID(id) },",
      "      { $set: funcionario }",
      "    )",
      "",
      "    connection.close()",
      "",
      "    context.res = {",
      "      status: 200,",
      "      body: funcionarios",
      "    }",
      "  } catch (error) {",
      "    context.res = {",
      "      status: 500,",
      "      body: 'Erro ao atualizar o Funcionário'",
      "    }",
      "  }",
      "}",
      ""
    ],
    "description": "Snippet responsável por atualizar 'Funcionário' por Id"
  },
  "Snippet responsável excluir um 'Funcionário' pelo Id": {
    "prefix": "mongo-serverless-delete",
    "body": [
      "const { ObjectID } = require('mongodb')",
      "const createMongoClient = require('../shared/mongo')",
      "",
      "module.exports = async function (context, req) {",
      "  const { id } = req.params",
      "",
      "  if (!id) {",
      "    context.res = {",
      "      status: 400,",
      "      body: 'Os campos são obrigatórios!'",
      "    }",
      "",
      "    return",
      "  }",
      "",
      "  const { db, connection } = await createMongoClient()",
      "",
      "  const Funcionarios = db.collection('funcionarios')",
      "",
      "  try {",
      "    await Funcionarios.findOneAndDelete({ _id: ObjectID(id) })",
      "    connection.close()",
      "    context.res = {",
      "      status: 204,",
      "      body: 'Funcionário excluído com sucesso!'",
      "    }",
      "  } catch (error) {",
      "    context.res = {",
      "      status: 500,",
      "      body: 'Erro ao excluir Funcionário' + id",
      "    }",
      "  }",
      "}"
    ],
    "description": "Snippet responsável excluir um 'Funcionário' pelo Id"
  },
  "Snippet responsável listar um 'Funcionário' pelo Id": {
    "prefix": "mongo-serverless-listOne",
    "body": [
      "const { ObjectID } = require('mongodb')",
      "const createMongoClient = require('../shared/mongo')",
      "",
      "module.exports = async function (context, req) {",
      "  const { id } = req.params",
      "",
      "  if (!id) {",
      "    context.res = {",
      "      status: 400,",
      "      body: 'Por favor, passe o número correto do Id do Funcionário!'",
      "    }",
      "",
      "    return",
      "  }",
      "",
      "  const { db, connection } = await createMongoClient()",
      "",
      "  const Funcionarios = db.collection('funcionarios')",
      "",
      "  try {",
      "    const body = await Funcionarios.findOne({ _id: ObjectID(id) })",
      "",
      "    connection.close()",
      "    context.res = {",
      "      status: 200,",
      "      body",
      "    }",
      "  } catch (error) {",
      "    context.res = {",
      "      status: 500,",
      "      body: 'Erro ao listar o Funcionário pelo Id.'",
      "    }",
      "  }",
      "}"
    ],
    "description": "Snippet responsável listar um 'Funcionário' pelo Id"
  }
}
